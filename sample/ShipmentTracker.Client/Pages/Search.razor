@inherits CollectionStateComponentBase<Shipment>
@page "/search"
@rendermode InteractiveAuto

<PageTitle>Search Shipments</PageTitle>
<h1>Search Shipments</h1>

<div class="content">
    <div class="search-form">
        <div class="row mb-3">
            <div class="col-md-6">
                <RadzenLabel Text="Tracking Number" />
                <RadzenTextBox @bind-Value="_trackingNumber" Placeholder="Enter tracking number..." Class="w-100" />
            </div>
            <div class="col-md-6">
                <RadzenLabel Text="Customer Name" />
                <RadzenTextBox @bind-Value="_customerName" Placeholder="Enter customer name..." Class="w-100" />
            </div>
        </div>
        
        <div class="row mb-3">
            <div class="col-md-3">
                <RadzenLabel Text="Start Date" />
                <RadzenDatePicker @bind-Value="_startDate" DateFormat="MM/dd/yyyy" Class="w-100" />
            </div>
            <div class="col-md-3">
                <RadzenLabel Text="End Date" />
                <RadzenDatePicker @bind-Value="_endDate" DateFormat="MM/dd/yyyy" Class="w-100" />
            </div>
            <div class="col-md-3">
                <RadzenLabel Text="Status" />
                <RadzenDropDown @bind-Value="_selectedStatus" Data="@_statusOptions" 
                                TextProperty="Text" ValueProperty="Value" 
                                AllowClear="true" Placeholder="All statuses" Class="w-100" />
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <RadzenButton Text="Search" Icon="search" ButtonStyle="ButtonStyle.Primary" Click="SearchShipments" />
                <RadzenButton Text="Clear" Icon="clear" ButtonStyle="ButtonStyle.Light" Click="ClearSearch" Class="ms-2" />
            </div>
        </div>
    </div>

    @if (Model != null)
    {
        <h2>Search Results (@Model.Count shipments found)</h2>
        <RadzenDataGrid Data="@Model" TItem="Shipment" AllowPaging="true" PageSize="10">
            <Columns>
                <RadzenDataGridColumn TItem="Shipment" Property="TrackingNumber" Title="Tracking #" Width="120px">
                    <Template Context="shipment">
                        <a href="/track/@shipment.TrackingNumber" class="text-primary">@shipment.TrackingNumber</a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Shipment" Property="CustomerName" Title="Customer" />
                <RadzenDataGridColumn TItem="Shipment" Property="Name" Title="Item" />
                <RadzenDataGridColumn TItem="Shipment" Property="Status" Title="Status">
                    <Template Context="shipment">
                        <span class="badge @GetStatusBadgeClass(shipment.Status)">@shipment.Status</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Shipment" Property="CreatedDate" Title="Created" FormatString="{0:MM/dd/yyyy}" />
                <RadzenDataGridColumn TItem="Shipment" Property="DestinationAddress" Title="Destination" />
            </Columns>
        </RadzenDataGrid>
    }
</div>
<div class="alert-warning">@ErrorMessage</div>

@code {

    private string? _trackingNumber;
    private string? _customerName;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private ShipmentStatus? _selectedStatus;
    protected override bool LoadOnInitialize { get; set; } = false;

    private readonly List<StatusOption> _statusOptions =
    [
        new() { Text = "Pending", Value = ShipmentStatus.Pending },
        new() { Text = "In Transit", Value = ShipmentStatus.InTransit },
        new() { Text = "Delivered", Value = ShipmentStatus.Delivered },
        new() { Text = "Delayed", Value = ShipmentStatus.Delayed }
    ];

    private async Task SearchShipments()
    {
        List<SearchRecord> queryParams = [];

        if (!string.IsNullOrWhiteSpace(_trackingNumber))
        {
            queryParams.Add(new SearchRecord(nameof(Shipment.TrackingNumber), _trackingNumber, SearchOption.Equals));
        }
        if (!string.IsNullOrWhiteSpace(_customerName))
        {
            queryParams.Add(new SearchRecord(nameof(Shipment.CustomerName), _customerName, SearchOption.Contains));
        }

        if (_startDate.HasValue)
        {
            if (_endDate.HasValue)
            {
                if (_startDate > _endDate)
                {
                    ErrorMessage = "Start date cannot be after end date.";

                    return;
                }

                queryParams.Add(new SearchRecord(nameof(Shipment.CreatedDate), _startDate.Value.ToString("O"),
                    SearchOption.Between, _endDate.Value.ToString("O")));
            }
            else
            {
                queryParams.Add(new SearchRecord(nameof(Shipment.CreatedDate), _startDate.Value.ToString("O"),
                    SearchOption.GreaterThanOrEqual));
            }
        }
        else if (_endDate.HasValue)
        {
            queryParams.Add(new SearchRecord(nameof(Shipment.CreatedDate), _endDate.Value.ToString("O"),
                SearchOption.LessThanOrEqual));
        }
        
        if (_selectedStatus.HasValue)
        {
            queryParams.Add(new  SearchRecord(nameof(Shipment.Status), _selectedStatus.Value.ToString(),
                SearchOption.Equals)); 
        }

        await Load(queryParams);
        Console.WriteLine($"Results loaded: {Model?.Count} shipments found.");
        StateHasChanged();
    }

    private void ClearSearch()
    {
        _trackingNumber = null;
        _customerName = null;
        _startDate = null;
        _endDate = null;
        _selectedStatus = null;
        Clear();
        Model = null;
    }

    private string GetStatusBadgeClass(ShipmentStatus status)
    {
        return status switch
        {
            ShipmentStatus.Pending => "badge-pending",
            ShipmentStatus.InTransit => "badge-intransit",
            ShipmentStatus.Delivered => "badge-delivered",
            ShipmentStatus.Delayed => "badge-delayed",
            _ => "badge-secondary"
        };
    }

    private class StatusOption
    {
        public string Text { get; set; } = string.Empty;
        public ShipmentStatus Value { get; set; }
    }
}